{"ast":null,"code":"var _jsxFileName = \"/home/w/d/shader-prototype/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { useRef } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// This shader is from Bruno Simons Threejs-Journey: https://threejs-journey.xyz\nconst WaveMaterial = shaderMaterial({\n  time: 0,\n  colorStart: new THREE.Color('#FF0000'),\n  colorMedium: new THREE.Color('#white'),\n  colorEnd: new THREE.Color('red')\n}, \"\\n      varying vec2 vUv;\\n      void main() {\\n        vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n        vec4 viewPosition = viewMatrix * modelPosition;\\n        vec4 projectionPosition = projectionMatrix * viewPosition;\\n        gl_Position = projectionPosition;\\n        vUv = uv;\\n      }\", \"\\n      //\\n// GLSL textureless classic 3D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-10-11\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_388995826(vec3 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_388995826(vec4 x)\\n{\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_388995826(vec4 x)\\n{\\n  return mod289_388995826(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt_388995826(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec3 fade_388995826(vec3 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\n// Classic Perlin noise\\nfloat cnoise3(vec3 P)\\n{\\n  vec3 Pi0 = floor(P); // Integer part for indexing\\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n  Pi0 = mod289_388995826(Pi0);\\n  Pi1 = mod289_388995826(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute_388995826(permute_388995826(ix) + iy);\\n  vec4 ixy0 = permute_388995826(ixy + iz0);\\n  vec4 ixy1 = permute_388995826(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt_388995826(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt_388995826(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade_388995826(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n  return 2.2 * n_xyz;\\n}\\n\\n      uniform float time;\\n      uniform vec3 colorStart;\\n      uniform vec3 colorMedium;\\n      uniform vec3 colorEnd;\\n      varying vec2 vUv;\\n      void main() {\\n        vec2 displacedUv = vUv + cnoise3(vec3(vUv * 1.0, time * 0.05));\\n        float strength = cnoise3(vec3(displacedUv * 10.0, time * 0.2));\\n        float outerGlow = distance(vUv, vec2(0.5)) * 2.0 - 0.5;\\n        strength += outerGlow;\\n        strength += step(-0.2, strength) * 0.6;\\n        strength = clamp(strength, 0.0, 1.0);\\n        vec3 color = mix(colorStart, colorMedium, strength);\\n        gl_FragColor = vec4(color, 1.0);\\n        #include <tonemapping_fragment>\\n        #include <encodings_fragment>\\n      }\");\nextend({\n  WaveMaterial\n});\nexport { WaveMaterial };\nfunction ShaderPlane() {\n  _s();\n  const ref = useRef();\n  const {\n    width,\n    height\n  } = useThree(state => state.viewport);\n  useFrame((state, delta) => ref.current.time += delta);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    scale: [width, height, 1],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"waveMaterial\", {\n      ref: ref,\n      toneMapped: true,\n      colorStart: '#FF0000',\n      colorMedium: 'white',\n      colorEnd: 'black'\n    }, WaveMaterial.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(ShaderPlane, \"20aR5YOEJxwwrDXmr8POYnwurQ8=\", false, function () {\n  return [useThree, useFrame];\n});\n_c = ShaderPlane;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: /*#__PURE__*/_jsxDEV(ShaderPlane, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ShaderPlane\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useRef","Canvas","useFrame","useThree","THREE","extend","shaderMaterial","WaveMaterial","time","colorStart","Color","colorMedium","colorEnd","ShaderPlane","ref","width","height","state","viewport","delta","current","key","App"],"sources":["/home/w/d/shader-prototype/src/App.jsx"],"sourcesContent":["import { useRef } from 'react'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport * as THREE from 'three'\nimport { extend } from '@react-three/fiber'\nimport { shaderMaterial } from '@react-three/drei'\nimport glsl from 'babel-plugin-glsl/macro'\n\n// This shader is from Bruno Simons Threejs-Journey: https://threejs-journey.xyz\nconst WaveMaterial = shaderMaterial(\n  {\n    time: 0,\n    colorStart: new THREE.Color('#FF0000'),\n    colorMedium: new THREE.Color('#white'),\n    colorEnd: new THREE.Color('red'),\n  },\n  glsl`\n      varying vec2 vUv;\n      void main() {\n        vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n        vec4 viewPosition = viewMatrix * modelPosition;\n        vec4 projectionPosition = projectionMatrix * viewPosition;\n        gl_Position = projectionPosition;\n        vUv = uv;\n      }`,\n  glsl`\n      #pragma glslify: cnoise3 = require(glsl-noise/classic/3d.glsl) \n      uniform float time;\n      uniform vec3 colorStart;\n      uniform vec3 colorMedium;\n      uniform vec3 colorEnd;\n      varying vec2 vUv;\n      void main() {\n        vec2 displacedUv = vUv + cnoise3(vec3(vUv * 1.0, time * 0.05));\n        float strength = cnoise3(vec3(displacedUv * 10.0, time * 0.2));\n        float outerGlow = distance(vUv, vec2(0.5)) * 2.0 - 0.5;\n        strength += outerGlow;\n        strength += step(-0.2, strength) * 0.6;\n        strength = clamp(strength, 0.0, 1.0);\n        vec3 color = mix(colorStart, colorMedium, strength);\n        gl_FragColor = vec4(color, 1.0);\n        #include <tonemapping_fragment>\n        #include <encodings_fragment>\n      }`\n)\n\nextend({ WaveMaterial })\n\nexport { WaveMaterial }\n\n\nfunction ShaderPlane() {\n  const ref = useRef()\n  const { width, height } = useThree((state) => state.viewport)\n  useFrame((state, delta) => (ref.current.time += delta))\n  return (\n    <mesh scale={[width, height, 1]}>\n      <planeGeometry />\n      <waveMaterial ref={ref} key={WaveMaterial.key} toneMapped={true} colorStart={'#FF0000'} colorMedium={'white'} colorEnd={'black'} />\n    </mesh>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas>\n      <ShaderPlane />\n    </Canvas>\n  )\n}\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,oBAAoB;AAC/D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,cAAc,QAAQ,mBAAmB;AAAA;AAGlD;AACA,MAAMC,YAAY,GAAGD,cAAc,CACjC;EACEE,IAAI,EAAE,CAAC;EACPC,UAAU,EAAE,IAAIL,KAAK,CAACM,KAAK,CAAC,SAAS,CAAC;EACtCC,WAAW,EAAE,IAAIP,KAAK,CAACM,KAAK,CAAC,QAAQ,CAAC;EACtCE,QAAQ,EAAE,IAAIR,KAAK,CAACM,KAAK,CAAC,KAAK;AACjC,CAAC,q0IA6BF;AAEDL,MAAM,CAAC;EAAEE;AAAa,CAAC,CAAC;AAExB,SAASA,YAAY;AAGrB,SAASM,WAAW,GAAG;EAAA;EACrB,MAAMC,GAAG,GAAGd,MAAM,EAAE;EACpB,MAAM;IAAEe,KAAK;IAAEC;EAAO,CAAC,GAAGb,QAAQ,CAAEc,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAAC;EAC7DhB,QAAQ,CAAC,CAACe,KAAK,EAAEE,KAAK,KAAML,GAAG,CAACM,OAAO,CAACZ,IAAI,IAAIW,KAAM,CAAC;EACvD,oBACE;IAAM,KAAK,EAAE,CAACJ,KAAK,EAAEC,MAAM,EAAE,CAAC,CAAE;IAAA,wBAC9B;MAAA;MAAA;MAAA;IAAA,QAAiB,eACjB;MAAc,GAAG,EAAEF,GAAI;MAAwB,UAAU,EAAE,IAAK;MAAC,UAAU,EAAE,SAAU;MAAC,WAAW,EAAE,OAAQ;MAAC,QAAQ,EAAE;IAAQ,GAAnGP,YAAY,CAACc,GAAG;MAAA;MAAA;MAAA;IAAA,QAAsF;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9H;AAEX;AAAC,GAVQR,WAAW;EAAA,QAEQV,QAAQ,EAClCD,QAAQ;AAAA;AAAA,KAHDW,WAAW;AAYpB,eAAe,SAASS,GAAG,GAAG;EAC5B,oBACE,QAAC,MAAM;IAAA,uBACL,QAAC,WAAW;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACR;AAEb;AAAC,MANuBA,GAAG;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}