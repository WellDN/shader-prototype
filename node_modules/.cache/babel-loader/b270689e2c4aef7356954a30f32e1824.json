{"ast":null,"code":"var _jsxFileName = \"/home/w/d/shader-prototype/src/App.jsx\",\n  _s = $RefreshSig$();\nimport * as THREE from 'three';\nimport { useRef, Suspense } from 'react';\nimport { Canvas, useFrame, useThree, extend, useLoader } from '@react-three/fiber';\nimport { shaderMaterial } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrototypeMaterial = shaderMaterial(\n//uniform use cases: pass mouse position data, Time information, Colors, Textures\n{\n  uTime: 0,\n  uColor: new THREE.Color(0.0, 0.0, 0.0),\n  uTexture: new THREE.Texture()\n}, //Vertex shader use cases: calculates/ manipulates the position of each individual vertex\n\"\\n    precision mediump float;\\n    varying vec2 vUv;\\n    varying float vWave;\\n    uniform float uTime;\\n    //\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_934251421(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_934251421(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_934251421(vec4 x) {\\n     return mod289_934251421(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt_934251421(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise3(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D_934251421 = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_934251421 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_934251421;\\n  vec3 i1 = min( g_934251421.xyz, l.zxy );\\n  vec3 i2 = max( g_934251421.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D_934251421.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_934251421(i);\\n  vec4 p = permute_934251421( permute_934251421( permute_934251421(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D_934251421.wyz - D_934251421.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1_934251421 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0_934251421 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1_934251421.xy,h.z);\\n  vec3 p3 = vec3(a1_934251421.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt_934251421(vec4(dot(p0_934251421,p0_934251421), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0_934251421 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0_934251421,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n    void main() {\\n      vUv = uv;\\n      vec3 pos = position;\\n      float noiseFreq = 2.0;\\n      float noiseAmp = 0.4;\\n      vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\\n      pos.z += snoise3(noisePos) * noiseAmp;\\n      vWave = pos.z;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);  \\n    }\\n  \", // Fragment Shader\n\"\\n    precision mediump float;\\n    uniform vec3 uColor;\\n    uniform float uTime;\\n    uniform sampler2D uTexture;\\n    varying vec2 vUv;\\n    varying float vWave;\\n    void main() {\\n      float wave = vWave * 0.2;\\n      vec3 texture = texture2D(uTexture, vUv + wave).rgb;\\n      gl_FragColor = vec4(texture, 1.0); \\n    }\\n  \");\nextend({\n  PrototypeMaterial\n});\nfunction ShaderPlane() {\n  _s();\n  const ref = useRef();\n  const {\n    width,\n    height\n  } = useThree(state => state.viewport);\n  useFrame(_ref => {\n    let {\n      clock\n    } = _ref;\n    return ref.current.uTime = clock.getElapsedTime();\n  });\n  const [image] = useLoader(THREE.TextureLoader, [\"https://images.unsplash.com/photo-1604011092346-0b4346ed714e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1534&q=80\"]);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    scale: [width, height, 1],\n    children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"prototypeMaterial\", {\n      uColor: \"green\",\n      ref: ref,\n      uTexture: image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(ShaderPlane, \"GMvNC7uMtW5nxUf1kptRfMxIpDA=\", false, function () {\n  return [useThree, useFrame, useLoader];\n});\n_c = ShaderPlane;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: /*#__PURE__*/_jsxDEV(ShaderPlane, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ShaderPlane\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["THREE","useRef","Suspense","Canvas","useFrame","useThree","extend","useLoader","shaderMaterial","PrototypeMaterial","uTime","uColor","Color","uTexture","Texture","ShaderPlane","ref","width","height","state","viewport","clock","current","getElapsedTime","image","TextureLoader","App"],"sources":["/home/w/d/shader-prototype/src/App.jsx"],"sourcesContent":["import * as THREE from 'three'\nimport { useRef, Suspense } from 'react'\nimport { Canvas, useFrame, useThree, extend, useLoader } from '@react-three/fiber'\nimport { shaderMaterial } from '@react-three/drei'\nimport glsl from 'babel-plugin-glsl/macro'\n\nconst PrototypeMaterial = shaderMaterial(\n    //uniform use cases: pass mouse position data, Time information, Colors, Textures\n    { uTime: 0, \n    uColor: new THREE.Color(0.0, 0.0, 0.0),\n    uTexture: new THREE.Texture(),\n },\n    //Vertex shader use cases: calculates/ manipulates the position of each individual vertex\n    glsl`\n    precision mediump float;\n    varying vec2 vUv;\n    varying float vWave;\n    uniform float uTime;\n    #pragma glslify: snoise3 = require(glsl-noise/simplex/3d);\n    void main() {\n      vUv = uv;\n      vec3 pos = position;\n      float noiseFreq = 2.0;\n      float noiseAmp = 0.4;\n      vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\n      pos.z += snoise3(noisePos) * noiseAmp;\n      vWave = pos.z;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);  \n    }\n  `,\n  // Fragment Shader\n  glsl`\n    precision mediump float;\n    uniform vec3 uColor;\n    uniform float uTime;\n    uniform sampler2D uTexture;\n    varying vec2 vUv;\n    varying float vWave;\n    void main() {\n      float wave = vWave * 0.2;\n      vec3 texture = texture2D(uTexture, vUv + wave).rgb;\n      gl_FragColor = vec4(texture, 1.0); \n    }\n  `\n);\n\nextend ({ PrototypeMaterial });\n\nfunction ShaderPlane() {\n  const ref = useRef()\n  const { width, height} = useThree((state) => state.viewport)\n  useFrame(({clock}) => (ref.current.uTime = clock.getElapsedTime()));\n\n  const [image] = useLoader(THREE.TextureLoader, [\n    \"https://images.unsplash.com/photo-1604011092346-0b4346ed714e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1534&q=80\",\n  ]);\n  \n  return (\n    <mesh scale={[width, height, 1]}>\n\n      <planeBufferGeometry />\n      <prototypeMaterial uColor={\"green\"} ref={ref} uTexture={image}/>\n    </mesh>\n    \n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas>\n        <Suspense fallback={null}> \n      <ShaderPlane />\n      </Suspense>\n    </Canvas>\n  )\n}"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxC,SAASC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,oBAAoB;AAClF,SAASC,cAAc,QAAQ,mBAAmB;AAAA;AAGlD,MAAMC,iBAAiB,GAAGD,cAAc;AACpC;AACA;EAAEE,KAAK,EAAE,CAAC;EACVC,MAAM,EAAE,IAAIX,KAAK,CAACY,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EACtCC,QAAQ,EAAE,IAAIb,KAAK,CAACc,OAAO;AAC9B,CAAC,EACE;AAAA,0lHAkBF;AAAA,4UAcD;AAEDR,MAAM,CAAE;EAAEG;AAAkB,CAAC,CAAC;AAE9B,SAASM,WAAW,GAAG;EAAA;EACrB,MAAMC,GAAG,GAAGf,MAAM,EAAE;EACpB,MAAM;IAAEgB,KAAK;IAAEC;EAAM,CAAC,GAAGb,QAAQ,CAAEc,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAAC;EAC5DhB,QAAQ,CAAC;IAAA,IAAC;MAACiB;IAAK,CAAC;IAAA,OAAML,GAAG,CAACM,OAAO,CAACZ,KAAK,GAAGW,KAAK,CAACE,cAAc,EAAE;EAAA,CAAC,CAAC;EAEnE,MAAM,CAACC,KAAK,CAAC,GAAGjB,SAAS,CAACP,KAAK,CAACyB,aAAa,EAAE,CAC7C,gKAAgK,CACjK,CAAC;EAEF,oBACE;IAAM,KAAK,EAAE,CAACR,KAAK,EAAEC,MAAM,EAAE,CAAC,CAAE;IAAA,wBAE9B;MAAA;MAAA;MAAA;IAAA,QAAuB,eACvB;MAAmB,MAAM,EAAE,OAAQ;MAAC,GAAG,EAAEF,GAAI;MAAC,QAAQ,EAAEQ;IAAM;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAC3D;AAGX;AAAC,GAjBQT,WAAW;EAAA,QAEOV,QAAQ,EACjCD,QAAQ,EAEQG,SAAS;AAAA;AAAA,KALlBQ,WAAW;AAmBpB,eAAe,SAASW,GAAG,GAAG;EAC5B,oBACE,QAAC,MAAM;IAAA,uBACH,QAAC,QAAQ;MAAC,QAAQ,EAAE,IAAK;MAAA,uBAC3B,QAAC,WAAW;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACJ;AAEb;AAAC,MARuBA,GAAG;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}